'use client';

import React, { useState, useEffect } from 'react';
import Link from 'next/link';

// Project information type definition
interface ProjectInfo {
  projectName: string;
  projectNumber: string;
  country: string;
  projectStatus: string;
  projectType: string;
  fundingSource: string;
  sector: string;
  targetDisaster: string;
  climateInfrastructure: string;
  region: string;
  responsibleAgency: string;
  description: string;
}

// Climate resilience infrastructure type definition
interface ClimateInfrastructure {
  disaster: string;
  measures: string[];
}

export default function Dashboard() {
  const [activeTab, setActiveTab] = useState('plan');
  const [activeSubTab, setActiveSubTab] = useState('plan');
  const [selectedLog, setSelectedLog] = useState(null);
  const [selectedYear, setSelectedYear] = useState('2024.4');
  const [buildingOverlay, setBuildingOverlay] = useState(true);
  const [suspiciousLogDetected, setSuspiciousLogDetected] = useState(true);
  const [projectProgress, setProjectProgress] = useState(63);
  const [projectInfo, setProjectInfo] = useState<ProjectInfo | null>(null);
  const [climateInfrastructure, setClimateInfrastructure] = useState<ClimateInfrastructure[]>([]);
  const [isAnalyzing, setIsAnalyzing] = useState(false);
  const [userName, setUserName] = useState<string>('');

  useEffect(() => {
    // Load user information
    const savedUserName = localStorage.getItem('gcf_userName');
    if (savedUserName) {
      setUserName(savedUserName);
    }

    // Load and analyze project data
    analyzeProjectDocuments();
  }, []);
  // Document analysis using LLM
  const analyzeProjectDocuments = async () => {
    setIsAnalyzing(true);
    
    try {
      // Get the latest project data from localStorage
      const existingProjects = JSON.parse(localStorage.getItem('gcf_projects') || '[]');
      const latestProject = existingProjects[existingProjects.length - 1];
      
      if (!latestProject) {
        // Use default sample data if no project data exists
        setProjectInfo({
          projectName: "Dhaka Flood Management Project",
          projectNumber: "51-01",
          country: "Bangladesh",
          projectStatus: "Active",
          projectType: "Grant",
          fundingSource: "UK-ASEAN Green Finance Trust Fund $10 million",
          sector: "Rural Development / Rural Flood Prevention",
          targetDisaster: "Flooding",
          climateInfrastructure: "Dike Construction/Reinforcement",
          region: "Dhaka Station Area",
          responsibleAgency: "District Regional Government",
          description: "This project will support the government to achieve the outcome of having an effective and sustainable flood risk management system in operation and effectively maintained."
        });
        setDefaultClimateInfrastructure();
        setIsAnalyzing(false);
        return;
      }

      // Call API for document analysis
      const response = await fetch('/api/analyze-documents', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          documents: latestProject.files || [],
          projectData: {
            name: latestProject.name,
            number: latestProject.number
          }
        })
      });

      if (!response.ok) {
        throw new Error('API call failed');
      }

      const analysisResult = await response.json();
      setProjectInfo(analysisResult.projectInfo);
      setClimateInfrastructure(analysisResult.climateInfrastructure);

    } catch (error) {
      console.error('Document analysis error:', error);
      setDefaultProjectInfo();
      setDefaultClimateInfrastructure();
    }
    
    setIsAnalyzing(false);
  };
  const setDefaultProjectInfo = () => {
    setProjectInfo({
      projectName: "Dhaka Flood Management Project",
      projectNumber: "51-01",
      country: "Bangladesh",
      projectStatus: "Active",
      projectType: "Grant",
      fundingSource: "UK-ASEAN Green Finance Trust Fund $10 million",
      sector: "Rural Development / Rural Flood Prevention",
      targetDisaster: "Flooding",
      climateInfrastructure: "Dike Construction/Reinforcement",
      region: "Dhaka Station Area",
      responsibleAgency: "District Regional Government",
      description: "This project will support the government to achieve the outcome of having an effective and sustainable flood risk management system in operation and effectively maintained. An investment of approximately $275 million is expected, with three outcomes: (i) enhanced institutional and planning capacity for flood risk management, (ii) rehabilitation and improvement of the Hong Taybinhriver and Ma river embankment systems, and (iii) modernization of flood forecasting and early warning systems for the Hong Taybinh and Ma rivers."
    });
  };

  const setDefaultClimateInfrastructure = () => {
    setClimateInfrastructure([
      {
        disaster: "Flooding",
        measures: [
          "Embankment and dike construction",
          "Drainage system improvement", 
          "Retention basin/detention pond construction",
          "Rainwater infiltration facilities",
          "Flood barrier/cutoff wall installation",
          "High ground shelter/evacuation route installation"
        ]
      },
      {
        disaster: "Drought",
        measures: [
          "Reservoir/dam construction and expansion",
          "Irrigation facility improvement",
          "Groundwater development and management system",
          "Seawater desalination facilities",
          "Rainwater collection and utilization facilities"
        ]
      },
      {
        disaster: "Heat Wave",
        measures: [
          "Shade/cooling zone installation",
          "Urban forest/green space creation",
          "Cool roof and green roof systems",
          "Air-conditioned shelter/rest areas"
        ]
      },
      {
        disaster: "Strong Wind/Typhoon",
        measures: [
          "Wind-resistant buildings and structures",
          "Windbreak forest creation",
          "Robust power infrastructure"
        ]
      },
      {
        disaster: "Sea Level Rise",
        measures: [
          "Coastal barrier/breakwater construction and reinforcement",
          "Mangrove forest restoration/creation",
          "Coastal wetland restoration",
          "Relocation or elevation of infrastructure like roads/housing to higher ground"
        ]
      }
    ]);
  };

  // Monitoring data and functions
  const satelliteData = {
    '2023.6': "/api/placeholder/400/300",
    '2023.1': "/api/placeholder/400/300", 
    '2024.4': "/api/placeholder/400/300",
    '2023.12': "/api/placeholder/400/300"
  };

  const years = ['2023.6', '2023.1', '2024.4', '2023.12'];

  const projectLogs = [
    {
      id: "blk_001",
      timestamp: "2024-01-15T10:30:00Z",
      type: "infrastructure",
      status: "safe",
      title: "Embankment Construction Phase 1 Completed",
      description: "첫 번째 구간 제방 건설 완료. 위성 데이터 검증을 통해 구조적 안정성 확인.",
      hash: "0x7d865e959b2466918c9863afca942d0fb89d7c9ac0c99bafc3749504ded97730",
      coordinates: { lat: 23.8103, lng: 90.4125 },
      impact: "major",
      isLocked: false
    },
    {
      id: "blk_002", 
      timestamp: "2024-01-20T14:15:00Z",
      type: "monitoring",
      status: "warning",
      title: "Unusual Water Level Detection",
      description: "위성 이미지 분석 결과 예상보다 높은 수위 감지. 추가 모니터링 필요.",
      hash: "0x4f267a7817c39ec9b1297b2b86f4c3a50c82a2c6f5a92b0f7e3c1e5f7e3c1e5f",
      coordinates: { lat: 23.8203, lng: 90.4225 },
      impact: "minor",
      isLocked: true
    },
    {
      id: "blk_003",
      timestamp: "2024-02-01T09:45:00Z", 
      type: "compliance",
      status: "danger",
      title: "Environmental Impact Assessment Required",
      description: "새로운 건설 지역에서 환경 영향 평가 필요. 즉시 조치 요구됨.",
      hash: "0xa8e7c5b9f2d3e4a6c7b8d9e0f1a2b3c4d5e6f7a8b9c0d1e2f3a4b5c6d7e8f9a0",
      coordinates: { lat: 23.7903, lng: 90.4025 },
      impact: "major",
      isLocked: false
    }
  ];

  const monitoringPlanData = {
    title: "Dhaka Flood Management Project",
    region: "Dhaka Sateyun District",
    country: "Bangladesh",
    budget: "USD 275 million",
    duration: "2023-2026",
    objectives: [
      "홍수 위험 관리 시스템의 효과적이고 지속 가능한 운영 및 유지관리 지원",
      "지역 사회의 홍수 대응 역량 강화",
      "기후 변화 적응을 위한 인프라 구축"
    ],
    keyComponents: [
      "제방 건설 및 보강 (15km)",
      "배수 시스템 설치 및 개선",
      "조기 경보 시스템 구축",
      "지역 사회 교육 및 훈련 프로그램"
    ]
  };

  const getStatusColor = (status) => {
    switch(status) {
      case 'safe': return 'text-green-600 bg-green-100';
      case 'warning': return 'text-yellow-600 bg-yellow-100';
      case 'danger': return 'text-red-600 bg-red-100';
      default: return 'text-gray-600 bg-gray-100';
    }
  };

  const getStatusIcon = (status) => {
    switch(status) {
      case 'safe': return <span>✅</span>;
      case 'warning': return <span>⚠️</span>;
      case 'danger': return <span>🚨</span>;
      default: return <span>🛡️</span>;
    }
  };

  const toggleLogLock = (logId) => {
    console.log(`Toggling lock for log ${logId}`);
  };

  // Sample plan data
  const planData = {
    title: "Dhaka Flood Management Project",
    region: "Dhaka Sateyun District",
    country: "Bangladesh", 
    budget: "USD 275 million",
    duration: "2023-2026",
    objectives: [
      "홍수 위험 관리 시스템의 효과적이고 지속 가능한 운영 및 유지관리 지원",
      "지역 사회의 홍수 대응 역량 강화",
      "기후 변화 적응을 위한 인프라 구축"
    ],
    keyComponents: [
      "제방 건설 및 보강 (15km)",
      "배수 시스템 설치 및 개선",
      "조기 경보 시스템 구축",
      "지역 사회 교육 및 훈련 프로그램"
    ]
  };

  // Helper functions for monitoring
  const getStatusColor = (status) => {
    switch(status) {
      case 'safe': return 'text-green-600 bg-green-100';
      case 'warning': return 'text-yellow-600 bg-yellow-100';
      case 'danger': return 'text-red-600 bg-red-100';
      default: return 'text-gray-600 bg-gray-100';
    }
  };

  const getStatusIcon = (status) => {
    switch(status) {
      case 'safe': return <span>✅</span>;
      case 'warning': return <span>⚠️</span>;
      case 'danger': return <span>🚨</span>;
      default: return <span>🛡️</span>;
    }
  };

  const toggleLogLock = (logId) => {
    console.log(`Toggling lock for log ${logId}`);
  };

  return (
    <div className="min-h-screen bg-gray-50">
      {/* Header */}
      <header className="bg-black text-white p-4">
        <div className="max-w-7xl mx-auto px-8 flex justify-between items-center">
          <div className="flex items-center space-x-2">
            <div className="relative">
              <div className="w-8 h-4 border border-white bg-transparent"></div>
              <div className="absolute -top-5 left-1/2 transform -translate-x-1/2">
                <span className="text-white text-xs font-bold">V</span>
              </div>
            </div>
            <span className="font-medium italic">STAI-Tuned</span>
          </div>
          <div className="flex items-center space-x-4">
            <span className="text-white/90 text-sm">{userName}</span>
            <Link href="/" className="text-white/80 hover:text-white transition-colors text-sm">
              Back to Main
            </Link>
            <div className="w-8 h-8 bg-white/20 rounded-full flex items-center justify-center">
              <span className="text-white">👤</span>
            </div>
          </div>
        </div>
      </header>
      {/* Navigation Tabs */}
      <nav className="bg-white shadow-sm border-b">
        <div className="max-w-7xl mx-auto px-8">
          <div className="flex space-x-8">
            <button
              onClick={() => setActiveTab('plan')}
              className={`py-4 px-1 border-b-2 font-medium text-sm ${
                activeTab === 'plan'
                  ? 'border-green-500 text-green-600'
                  : 'border-transparent text-gray-500 hover:text-gray-700 hover:border-gray-300'
              }`}
            >
              Plan
            </button>
            <button
              onClick={() => setActiveTab('monitoring')}
              className={`py-4 px-1 border-b-2 font-medium text-sm ${
                activeTab === 'monitoring'
                  ? 'border-green-500 text-green-600'
                  : 'border-transparent text-gray-500 hover:text-gray-700 hover:border-gray-300'
              }`}
            >
              Monitoring
            </button>
            <button
              onClick={() => setActiveTab('reports')}
              className={`py-4 px-1 border-b-2 font-medium text-sm ${
                activeTab === 'reports'
                  ? 'border-green-500 text-green-600'
                  : 'border-transparent text-gray-500 hover:text-gray-700 hover:border-gray-300'
              }`}
            >
              Reports
            </button>
          </div>
        </div>
      </nav>
      {/* Main Content */}
      <main className="max-w-7xl mx-auto py-6 px-8">
        {isAnalyzing ? (
          // Analyzing state
          <div className="text-center py-12">
            <div className="inline-block animate-spin rounded-full h-12 w-12 border-b-2 border-green-500"></div>
            <p className="mt-4 text-lg text-gray-600">Analyzing documents to generate project information...</p>
          </div>
        ) : (
          // Plan tab content
          activeTab === 'plan' && projectInfo && (
            <div className="space-y-8">
              {/* Basic project information */}
              <div className="bg-white shadow rounded-lg p-6">
                <h2 className="text-2xl font-bold text-gray-900 mb-6">Basic Project Information</h2>
                <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
                  <div className="space-y-4">
                    <div>
                      <label className="block text-sm font-medium text-gray-700">Project Name</label>
                      <p className="mt-1 text-lg text-gray-900">{projectInfo.projectName}</p>
                    </div>
                    <div>
                      <label className="block text-sm font-medium text-gray-700">Project Number</label>
                      <p className="mt-1 text-lg text-gray-900">{projectInfo.projectNumber}</p>
                    </div>
                    <div>
                      <label className="block text-sm font-medium text-gray-700">Country/Economy</label>
                      <p className="mt-1 text-lg text-gray-900">{projectInfo.country}</p>
                    </div>
                    <div>
                      <label className="block text-sm font-medium text-gray-700">Project Status</label>
                      <span className="inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium bg-green-100 text-green-800">
                        {projectInfo.projectStatus}
                      </span>
                    </div>
                    <div>
                      <label className="block text-sm font-medium text-gray-700">Project Type/Support Method</label>
                      <p className="mt-1 text-lg text-gray-900">{projectInfo.projectType}</p>
                    </div>
                    <div>
                      <label className="block text-sm font-medium text-gray-700">Funding Source</label>
                      <p className="mt-1 text-lg text-gray-900">{projectInfo.fundingSource}</p>
                    </div>
                  </div>
                  <div className="space-y-4">
                    <div>
                      <label className="block text-sm font-medium text-gray-700">Sector/Subsector</label>
                      <p className="mt-1 text-lg text-gray-900">{projectInfo.sector}</p>
                    </div>
                    <div>
                      <label className="block text-sm font-medium text-gray-700">Target Disaster</label>
                      <p className="mt-1 text-lg text-gray-900">{projectInfo.targetDisaster}</p>
                    </div>
                    <div>
                      <label className="block text-sm font-medium text-gray-700">Climate Resilience Infrastructure</label>
                      <p className="mt-1 text-lg text-gray-900">{projectInfo.climateInfrastructure}</p>
                    </div>
                    <div>
                      <label className="block text-sm font-medium text-gray-700">Region</label>
                      <p className="mt-1 text-lg text-gray-900">{projectInfo.region}</p>
                    </div>
                    <div>
                      <label className="block text-sm font-medium text-gray-700">Responsible Agency</label>
                      <p className="mt-1 text-lg text-gray-900">{projectInfo.responsibleAgency}</p>
                    </div>
                  </div>
                </div>
                <div className="mt-6">
                  <label className="block text-sm font-medium text-gray-700 mb-2">Description</label>
                  <p className="text-gray-900 leading-relaxed">{projectInfo.description}</p>
                </div>
              </div>
              {/* Climate resilience infrastructure construction project */}
              <div className="bg-white shadow rounded-lg p-6">
                <h2 className="text-2xl font-bold text-gray-900 mb-6">Climate Resilience Infrastructure Construction Project</h2>
                <div className="space-y-6">
                  {climateInfrastructure.map((item, index) => (
                    <div key={index} className="border-l-4 border-green-500 pl-6">
                      <h3 className="text-xl font-semibold text-gray-900 mb-3">{index + 1}. {item.disaster}</h3>
                      <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-3">
                        {item.measures.map((measure, measureIndex) => (
                          <div key={measureIndex} className="bg-gray-50 rounded-lg p-3">
                            <span className="text-sm font-medium text-gray-700">
                              {measureIndex + 1}. {measure}
                            </span>
                          </div>
                        ))}
                      </div>
                    </div>
                  ))}
                </div>
              </div>
              {/* Re-analysis button */}
              <div className="text-center">
                <button
                  onClick={analyzeProjectDocuments}
                  className="px-6 py-3 bg-green-600 text-white rounded-lg hover:bg-green-700 transition-colors font-medium"
                >
                  Re-analyze Documents
                </button>
              </div>
            </div>
          )
        )}

        {/* Monitoring tab */}
        {activeTab === 'monitoring' && !isAnalyzing && (
          <div className="space-y-6">
            {/* Main Content Grid */}
            <div className="grid grid-cols-1 lg:grid-cols-3 gap-6">
              {/* Satellite Image Section */}
              <div className="lg:col-span-1">
                <div className="bg-white rounded-lg shadow-lg p-4">
                  <div className="relative">
                    <img 
                      src="/api/placeholder/400/300" 
                      alt="Satellite view"
                      className="w-full rounded-lg"
                    />
                    {buildingOverlay && (
                      <div className="absolute inset-0 pointer-events-none">
                        {/* Building outline overlays */}
                        <div className="absolute top-[30%] left-[40%] w-8 h-6 border-2 border-red-500 bg-red-500/20"></div>
                        <div className="absolute top-[60%] left-[60%] w-6 h-8 border-2 border-red-500 bg-red-500/20"></div>
                        <div className="absolute top-[45%] left-[25%] w-10 h-6 border-2 border-red-500 bg-red-500/20"></div>
                      </div>
                    )}
                    <div className="absolute bottom-4 left-4 bg-black/70 text-white px-2 py-1 rounded text-sm">
                      📍 Dakha, Bangladesh
                    </div>
                  </div>
                  
                  {/* Year Selection Timeline */}
                  <div className="mt-4">
                    <div className="flex justify-between items-center mb-2">
                      {years.map((year) => (
                        <button
                          key={year}
                          onClick={() => setSelectedYear(year)}
                          className={`px-3 py-1 text-sm rounded transition-colors ${
                            selectedYear === year
                              ? 'bg-blue-500 text-white'
                              : 'bg-gray-200 text-gray-700 hover:bg-gray-300'
                          }`}
                        >
                          {year}
                        </button>
                      ))}
                    </div>
                    <div className="text-xs text-gray-500 text-center">
                      Click year to view satellite image from that time
                    </div>
                  </div>
                </div>
              </div>

              {/* Status Cards */}
              <div className="lg:col-span-2 space-y-6">
                {/* Suspicious Log Alert */}
                {suspiciousLogDetected && (
                  <div className="bg-yellow-50 border border-yellow-200 rounded-lg p-4">
                    <div className="flex items-center">
                      <span>⚠️</span>
                      <div>
                        <h3 className="font-semibold text-yellow-800">Suspicious Log Detected</h3>
                        <p className="text-yellow-700 text-sm">로그 분석 중 이상 패턴이 감지되었습니다. 검토가 필요합니다.</p>
                      </div>
                    </div>
                  </div>
                )}

                {/* Progress Circle */}
                <div className="bg-white rounded-lg shadow-lg p-6">
                  <div className="flex items-center justify-center">
                    <div className="relative w-32 h-32">
                      <svg className="w-32 h-32 transform -rotate-90" viewBox="0 0 120 120">
                        <circle
                          cx="60"
                          cy="60"
                          r="50"
                          stroke="#e5e7eb"
                          strokeWidth="8"
                          fill="none"
                        />
                        <circle
                          cx="60"
                          cy="60"
                          r="50"
                          stroke="#10b981"
                          strokeWidth="8"
                          fill="none"
                          strokeDasharray={`${2 * Math.PI * 50}`}
                          strokeDashoffset={`${2 * Math.PI * 50 * (1 - projectProgress / 100)}`}
                          className="transition-all duration-500"
                        />
                      </svg>
                      <div className="absolute inset-0 flex items-center justify-center">
                        <div className="text-center">
                          <div className="text-2xl font-bold text-gray-900">{projectProgress}%</div>
                          <div className="text-sm text-gray-600">Project Progress</div>
                        </div>
                      </div>
                    </div>
                  </div>
                </div>
              </div>
            </div>

            {/* Sub Navigation */}
            <div className="bg-white rounded-lg shadow-lg">
              <div className="border-b border-gray-200">
                <nav className="flex space-x-8 px-6">
                  <button
                    onClick={() => setActiveSubTab('plan')}
                    className={`py-4 border-b-2 font-medium text-sm transition-colors ${
                      activeSubTab === 'plan'
                        ? 'border-blue-500 text-blue-600'
                        : 'border-transparent text-gray-500 hover:text-gray-700'
                    }`}
                  >
                    <span>📄</span>
                    Plan
                  </button>
                  <button
                    onClick={() => setActiveSubTab('log')}
                    className={`py-4 border-b-2 font-medium text-sm transition-colors ${
                      activeSubTab === 'log'
                        ? 'border-blue-500 text-blue-600'
                        : 'border-transparent text-gray-500 hover:text-gray-700'
                    }`}
                  >
                    <span>#</span>
                    Log
                  </button>
                </nav>
              </div>

              {/* Content Area */}
              <div className="p-6">
                {activeSubTab === 'plan' ? (
                  <div className="space-y-6">
                    {/* Project Overview */}
                    <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
                      <div>
                        <h3 className="text-lg font-semibold text-gray-900 mb-4">Project Information</h3>
                        <dl className="space-y-3">
                          <div>
                            <dt className="text-sm font-medium text-gray-500">Project Name</dt>
                            <dd className="text-sm text-gray-900">{planData.title}</dd>
                          </div>
                          <div>
                            <dt className="text-sm font-medium text-gray-500">Region</dt>
                            <dd className="text-sm text-gray-900">{planData.region}</dd>
                          </div>
                          <div>
                            <dt className="text-sm font-medium text-gray-500">Country</dt>
                            <dd className="text-sm text-gray-900">{planData.country}</dd>
                          </div>
                          <div>
                            <dt className="text-sm font-medium text-gray-500">Budget</dt>
                            <dd className="text-sm text-gray-900">{planData.budget}</dd>
                          </div>
                          <div>
                            <dt className="text-sm font-medium text-gray-500">Duration</dt>
                            <dd className="text-sm text-gray-900">{planData.duration}</dd>
                          </div>
                        </dl>
                      </div>
                      
                      <div>
                        <h3 className="text-lg font-semibold text-gray-900 mb-4">Key Objectives</h3>
                        <ul className="space-y-2">
                          {planData.objectives.map((obj, idx) => (
                            <li key={idx} className="text-sm text-gray-700 flex items-start">
                              <span>✅</span>
                              {obj}
                            </li>
                          ))}
                        </ul>
                      </div>
                    </div>

                    {/* Key Components */}
                    <div>
                      <h3 className="text-lg font-semibold text-gray-900 mb-4">Key Components</h3>
                      <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                        {planData.keyComponents.map((component, idx) => (
                          <div key={idx} className="bg-gray-50 rounded-lg p-4">
                            <div className="flex items-center">
                              <span>📈</span>
                              <span className="text-sm text-gray-700">{component}</span>
                            </div>
                          </div>
                        ))}
                      </div>
                    </div>
                  </div>
                ) : (
                  <div className="space-y-4">
                    <div className="flex items-center justify-between mb-4">
                      <h3 className="text-lg font-semibold text-gray-900">Project Activity Logs</h3>
                      <div className="text-sm text-gray-500">
                        Blockchain-verified transactions • Real-time monitoring
                      </div>
                    </div>

                    {/* Log Entries */}
                    <div className="space-y-4">
                      {projectLogs.map((log) => (
                        <div key={log.id} className="border border-gray-200 rounded-lg p-4 hover:shadow-md transition-shadow">
                          <div className="flex items-start justify-between">
                            <div className="flex-1">
                              <div className="flex items-center mb-2">
                                <span className={`inline-flex items-center px-2 py-1 rounded-full text-xs font-medium mr-3 ${getStatusColor(log.status)}`}>
                                  {getStatusIcon(log.status)}
                                  <span className="ml-1 capitalize">{log.status}</span>
                                </span>
                                <span className="text-xs text-gray-500">
                                  {new Date(log.timestamp).toLocaleString()}
                                </span>
                                <span className="ml-2 text-xs text-gray-400">
                                  Block: {log.id}
                                </span>
                              </div>
                              
                              <h4 className="font-medium text-gray-900 mb-1">{log.title}</h4>
                              <p className="text-sm text-gray-600 mb-2">{log.description}</p>
                              
                              <div className="flex items-center text-xs text-gray-500 space-x-4">
                                <span className="flex items-center">
                                  <span>📍</span>
                                  {log.coordinates.lat}, {log.coordinates.lng}
                                </span>
                                <span className="flex items-center">
                                  <span>#</span>
                                  {log.hash.substring(0, 16)}...
                                </span>
                              </div>
                            </div>
                            
                            <div className="flex items-center space-x-2 ml-4">
                              <button
                                onClick={() => setSelectedLog(log)}
                                className="p-2 text-gray-400 hover:text-gray-600 transition-colors"
                                title="View details"
                              >
                                <span>👁️</span>
                              </button>
                              <button
                                onClick={() => toggleLogLock(log.id)}
                                className="p-2 text-gray-400 hover:text-gray-600 transition-colors"
                                title={log.isLocked ? "Unlock" : "Lock"}
                              >
                                {log.isLocked ? <span>🔒</span> : <span>🔓</span>}
                              </button>
                            </div>
                          </div>
                        </div>
                      ))}
                    </div>
                  </div>
                )}
              </div>
            </div>

            {/* Log Detail Modal */}
            {selectedLog && (
              <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center p-4 z-50">
                <div className="bg-white rounded-lg max-w-2xl w-full max-h-[80vh] overflow-y-auto">
                  <div className="p-6">
                    <div className="flex items-center justify-between mb-4">
                      <h3 className="text-lg font-semibold text-gray-900">Block Details</h3>
                      <button
                        onClick={() => setSelectedLog(null)}
                        className="text-gray-400 hover:text-gray-600"
                      >
                        ✕
                      </button>
                    </div>
                    
                    <div className="space-y-4">
                      <div>
                        <label className="block text-sm font-medium text-gray-700">Block ID</label>
                        <p className="text-sm text-gray-900 font-mono">{selectedLog.id}</p>
                      </div>
                      
                      <div>
                        <label className="block text-sm font-medium text-gray-700">Hash</label>
                        <p className="text-sm text-gray-900 font-mono break-all">{selectedLog.hash}</p>
                      </div>
                      
                      <div>
                        <label className="block text-sm font-medium text-gray-700">Timestamp</label>
                        <p className="text-sm text-gray-900">{new Date(selectedLog.timestamp).toLocaleString()}</p>
                      </div>
                      
                      <div>
                        <label className="block text-sm font-medium text-gray-700">Status</label>
                        <span className={`inline-flex items-center px-2 py-1 rounded-full text-xs font-medium ${getStatusColor(selectedLog.status)}`}>
                          {getStatusIcon(selectedLog.status)}
                          <span className="ml-1 capitalize">{selectedLog.status}</span>
                        </span>
                      </div>
                      
                      <div>
                        <label className="block text-sm font-medium text-gray-700">Description</label>
                        <p className="text-sm text-gray-900">{selectedLog.description}</p>
                      </div>
                      
                      <div>
                        <label className="block text-sm font-medium text-gray-700">Coordinates</label>
                        <p className="text-sm text-gray-900">{selectedLog.coordinates.lat}, {selectedLog.coordinates.lng}</p>
                      </div>
                    </div>
                  </div>
                </div>
              </div>
            )}
          </div>
        )}

        {/* Reports tab - Climate resilience infrastructure construction project report */}
        {activeTab === 'reports' && !isAnalyzing && climateInfrastructure.length > 0 && (
          <div className="bg-white shadow rounded-lg p-8">
            <h1 className="text-3xl font-bold text-center text-gray-900 mb-8 border-b-2 border-gray-200 pb-4">
              Climate Resilience Infrastructure Construction Project
            </h1>
            
            <div className="space-y-8">
              {climateInfrastructure.map((item, index) => (
                <div key={index} className="border-l-4 border-green-500 pl-6">
                  <h2 className="text-2xl font-bold text-gray-900 mb-4">
                    {index + 1}. {item.disaster}
                  </h2>
                  
                  <div className="space-y-2">
                    {item.measures.map((measure, measureIndex) => (
                      <div key={measureIndex} className="flex items-start">
                        <span className="inline-block w-8 text-gray-600 font-medium">
                          {measureIndex + 1}.
                        </span>
                        <span className="text-gray-800 leading-relaxed">
                          {measure}
                        </span>
                      </div>
                    ))}
                  </div>
                </div>
              ))}
            </div>
            {/* Report bottom information */}
            <div className="mt-12 pt-8 border-t border-gray-200">
              <div className="text-center text-gray-600">
                <p className="mb-2">
                  <strong>Project Name:</strong> {projectInfo?.projectName}
                </p>
                <p className="mb-2">
                  <strong>Project Number:</strong> {projectInfo?.projectNumber}
                </p>
                <p className="text-sm">
                  Report Generated: {new Date().toLocaleDateString('en-US')}
                </p>
              </div>
            </div>

            {/* Report download/print buttons */}
            <div className="mt-8 text-center space-x-4">
              <button
                onClick={() => window.print()}
                className="px-6 py-3 bg-blue-600 text-white rounded-lg hover:bg-blue-700 transition-colors font-medium"
              >
                Print Report
              </button>
              <button
                onClick={analyzeProjectDocuments}
                className="px-6 py-3 bg-green-600 text-white rounded-lg hover:bg-green-700 transition-colors font-medium"
              >
                Regenerate Report
              </button>
            </div>
          </div>
        )}

        {/* Reports tab - When no data */}
        {activeTab === 'reports' && !isAnalyzing && climateInfrastructure.length === 0 && (
          <div className="bg-white shadow rounded-lg p-8 text-center">
            <h2 className="text-2xl font-bold text-gray-900 mb-4">Climate Resilience Infrastructure Construction Project Report</h2>
            <p className="text-gray-600 mb-6">Please analyze project documents to generate a report.</p>
            <button
              onClick={analyzeProjectDocuments}
              className="px-6 py-3 bg-green-600 text-white rounded-lg hover:bg-green-700 transition-colors font-medium"
            >
              Generate Report
            </button>
          </div>
        )}
      </main>
    </div>
  );
}
