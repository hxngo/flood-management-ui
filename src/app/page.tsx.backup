'use client';

import { useState, useRef, useEffect } from 'react';
import Image from 'next/image';
import Link from 'next/link';
import { extractColorsFromImageCanvas, ColorPalette } from '@/utils/colorExtractor';

// 프로젝트 데이터 타입 정의
interface Project {
  id: number;
  name: string;
  image: string;
  status: 'normal' | 'warning'; // 초록: 문제없음, 노랑: 의심로그 있음
}

// 샘플 프로젝트 데이터
const sampleProjects: Project[] = [
  {
    id: 1,
    name: "Bangladesh : Flood and River-bank Erosion Risk Management Investment Program",
    image: "/1.png",
    status: "normal"
  },
  {
    id: 2,
    name: "Indonesia : Flood Management in North Java Project", 
    image: "/2.png",
    status: "warning"
  },
  {
    id: 3,
    name: "Vietnam : Mekong Delta Climate Resilience Project",
    image: "/1.png",
    status: "normal"
  }  },
  {
    id: 4,
    name: "Philippines : Metro Manila Flood Management Project",
    image: "/2.png",
    status: "warning"
  },
  {
    id: 5,
    name: "Thailand : Bangkok Climate Adaptation Initiative",
    image: "/1.png",
    status: "normal"
  },
  {
    id: 6,
    name: "Cambodia : Flood Risk Reduction in Coastal Areas",
    image: "/2.png",
    status: "warning"
  }
];

export default function Home() {
  const [gradientStyle, setGradientStyle] = useState({
    background: 'linear-gradient(to right, #2E7D32, #66BB6A, #C8E6C9)'
  });
  const [profileImage, setProfileImage] = useState<string | null>(null);
  const [userName, setUserName] = useState<string>('GREEN CLIMATE FUND');
  const [currentColors, setCurrentColors] = useState<ColorPalette>({
    primary: '#2E7D32',
    secondary: '#66BB6A',
    tertiary: '#C8E6C9'
  });
  const [isLoggedIn, setIsLoggedIn] = useState<boolean>(false);
  const fileInputRef = useRef<HTMLInputElement>(null);

  // 컴포넌트 마운트 시 localStorage에서 로그인 정보 확인
  useEffect(() => {    console.log('=== 메인 페이지 로드 ===');
    
    const savedUserName = localStorage.getItem('gcf_userName');
    const savedIsLoggedIn = localStorage.getItem('gcf_isLoggedIn');
    
    console.log('저장된 사용자 이름:', savedUserName);
    console.log('저장된 로그인 상태:', savedIsLoggedIn);
    
    if (savedUserName && savedIsLoggedIn === 'true') {
      setUserName(savedUserName);
      setIsLoggedIn(true);
      console.log('로그인 상태 복원 완료');
    }
  }, []);

  const updateGradient = (palette: ColorPalette) => {
    const newGradient = {
      background: `linear-gradient(to right, ${palette.primary}, ${palette.secondary}, ${palette.tertiary})`
    };
    setGradientStyle(newGradient);
    setCurrentColors(palette);
    console.log('색상 업데이트:', palette);
  };

  const handleProfileImageUpload = (event: React.ChangeEvent<HTMLInputElement>) => {
    const file = event.target.files?.[0];
    if (file) {
      console.log('파일 선택됨:', file.name);
      
      const reader = new FileReader();
      reader.onload = (e) => {
        const imageSrc = e.target?.result as string;
        setProfileImage(imageSrc);
        
        const img = document.createElement('img') as HTMLImageElement;        img.onload = () => {
          try {
            const palette = extractColorsFromImageCanvas(img);
            updateGradient(palette);
          } catch (error) {
            console.error('색상 추출 오류:', error);
          }
        };
        img.src = imageSrc;
      };
      reader.readAsDataURL(file);
    }
  };

  const handleLogout = () => {
    console.log('로그아웃 시작');
    localStorage.removeItem('gcf_userName');
    localStorage.removeItem('gcf_isLoggedIn');
    localStorage.removeItem('gcf_userEmail');
    setUserName('GREEN CLIMATE FUND');
    setProfileImage(null);
    setIsLoggedIn(false);
    setGradientStyle({
      background: 'linear-gradient(to right, #2E7D32, #66BB6A, #C8E6C9)'
    });
    setCurrentColors({
      primary: '#2E7D32',
      secondary: '#66BB6A',
      tertiary: '#C8E6C9'
    });
    console.log('로그아웃 완료, 로그인 페이지로 이동');
    
    // 로그인 페이지로 리다이렉트
    window.location.href = '/login';
  };

  const triggerFileInput = () => {
    fileInputRef.current?.click();
  };

  // 프로젝트 상태에 따른 그라데이션 색상 반환  const getStatusGradient = (status: 'normal' | 'warning') => {
    if (status === 'normal') {
      return 'bg-gradient-to-t from-green-500/80 to-transparent';
    } else {
      return 'bg-gradient-to-t from-yellow-500/80 to-transparent';
    }
  };

  return (
    <div className="min-h-screen bg-white">
      {/* 1366x224 그라데이션 배너 */}
      <div 
        className="w-full relative pb-32"
        style={{
          ...gradientStyle,
          height: '224px'
        }}
      >
        {/* Header */}
        <header className="bg-black/90 text-white p-4">
          <div className="max-w-7xl mx-auto px-8 flex justify-between items-center">
            <div className="flex items-center space-x-2">
              <div className="relative">
                {/* 직사각형 틀만 (배경 투명) */}
                <div className="w-8 h-4 border border-white bg-transparent"></div>
                {/* V가 직사각형 상단 면에 바로 붙어있게 */}
                <div className="absolute -top-5 left-1/2 transform -translate-x-1/2">
                  <span className="text-white text-xs font-bold">V</span>
                </div>
              </div>
              <span className="font-medium italic">STAI-Tuned</span>
            </div>
            <div className="flex items-center space-x-4">
              {!isLoggedIn ? (
                <Link href="/login" className="text-white/80 hover:text-white transition-colors">
                  로그인
                </Link>
              ) : (                <>
                  <span className="text-white/90 text-sm">{userName}</span>
                  <button 
                    onClick={handleLogout}
                    className="text-white/80 hover:text-white transition-colors text-sm"
                  >
                    로그아웃
                  </button>
                </>
              )}
              <div 
                className="w-8 h-8 bg-white/20 rounded-full flex items-center justify-center cursor-pointer hover:bg-white/30 transition-colors relative overflow-hidden"
                onClick={triggerFileInput}
                title="프로필 이미지를 업로드하여 테마 색상을 변경하세요"
              >
                {profileImage ? (
                  <img 
                    src={profileImage} 
                    alt="Profile" 
                    className="w-full h-full object-cover"
                  />
                ) : (
                  <span className="text-white">👤</span>
                )}
              </div>
              <input
                ref={fileInputRef}
                type="file"
                accept="image/*"
                onChange={handleProfileImageUpload}
                className="hidden"
              />
            </div>
          </div>
        </header>
      </div>
      {/* Logo positioned at the boundary */}
      <div className="relative -mt-16 z-20">
        <div className="max-w-7xl mx-auto px-8">
          <div className="bg-white rounded-full p-8 shadow-lg inline-block">
            <div className="flex items-center space-x-4">
              <div className="w-16 h-16 flex items-center justify-center rounded-full overflow-hidden bg-gray-100">
                {profileImage ? (
                  <img
                    src={profileImage}
                    alt="User Profile"
                    className="w-full h-full object-cover"
                  />
                ) : (
                  <Image
                    src="/gcf-logo.svg"
                    alt="Green Climate Fund Logo"
                    width={64}
                    height={64}
                    className="w-full h-full"
                  />
                )}
              </div>
              <div>
                {isLoggedIn ? (
                  userName.split(' ').map((word, index) => (
                    <div key={index} className="text-green-600 font-bold text-lg">
                      {word}
                    </div>
                  ))
                ) : (
                  <>
                    <div className="text-green-600 font-bold text-lg">GREEN</div>
                    <div className="text-green-600 font-bold text-lg">CLIMATE</div>
                    <div className="text-green-600 font-bold text-lg">FUND</div>
                  </>
                )}
              </div>
            </div>
          </div>
        </div>
      </div>
      {/* White Background Content Section */}
      <div className="bg-white relative z-10 pt-16">
        <div className="max-w-7xl mx-auto px-8 pb-16">
          {/* GCF Title */}
          <div className="mb-8 ml-8">
            {isLoggedIn ? (
              <>
                <h1 className="text-6xl font-bold text-black mb-4">{userName}</h1>
                <h2 className="text-2xl text-black font-medium">My Project(s):</h2>
              </>
            ) : (
              <>
                <h1 className="text-6xl font-bold text-black mb-4">GCF</h1>
                <h2 className="text-2xl text-black font-medium">Investing Project(s):</h2>
              </>
            )}
          </div>

          {/* 프로젝트 목록 섹션 */}
          <div className="bg-white py-12">
            <div className="max-w-7xl mx-auto px-8">
              {/* 프로젝트 그리드 - 3개씩 표시 */}
              <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-8">
                {/* 첫 번째 박스: 새 프로젝트 추가 */}
                <Link href="/create-project" className="block">
                  <div className="bg-white rounded-lg shadow-lg border border-gray-200 hover:border-green-300 hover:shadow-xl transition-all duration-200 cursor-pointer h-80 flex items-center justify-center">
                    <div className="text-center">
                      <div className="text-6xl text-gray-300 mb-4">+</div>
                      <p className="text-gray-500 font-medium">Add New Project</p>
                    </div>
                  </div>
                </Link>
                {/* 프로젝트 카드들 */}
                {sampleProjects.map((project) => (
                  <Link key={project.id} href="/dashboard" className="block">
                    <div className="relative rounded-lg overflow-hidden shadow-lg h-80 group cursor-pointer">
                      {/* 위성사진 */}
                      <Image
                        src={project.image}
                        alt={project.name}
                        fill
                        className="object-cover group-hover:scale-105 transition-transform duration-300"
                      />
                      
                      {/* 프로젝트 상태에 따른 그라데이션 오버레이 */}
                      <div className={`absolute inset-0 ${getStatusGradient(project.status)}`}></div>
                      
                      {/* 프로젝트명 */}
                      <div className="absolute bottom-0 left-0 right-0 p-6 text-white">
                        <h3 className="text-lg font-medium leading-tight">
                          {project.name}
                        </h3>
                        {/* 상태 표시 (선택사항) */}
                        <div className="mt-2 flex items-center">
                          <div className={`w-3 h-3 rounded-full mr-2 ${
                            project.status === 'normal' ? 'bg-green-400' : 'bg-yellow-400'
                          }`}></div>
                          <span className="text-sm opacity-90">
                            {project.status === 'normal' ? '문제없음' : '의심로그 있음'}
                          </span>
                        </div>
                      </div>
                    </div>
                  </Link>
                ))}
              </div>
            </div>
          </div>
        </div>
      </div>
      {/* Color Theme Indicator */}
      <div className="fixed bottom-4 right-4 bg-white/90 backdrop-blur-sm rounded-lg p-3 shadow-lg">
        <div className="text-xs text-gray-600 mb-2">Current Theme Colors:</div>
        <div className="flex space-x-2 mb-3">
          <div 
            className="w-6 h-6 rounded-full border border-gray-300"
            style={{ background: currentColors.primary }}
          />
          <div 
            className="w-6 h-6 rounded-full border border-gray-300"
            style={{ background: currentColors.secondary }}
          />
          <div 
            className="w-6 h-6 rounded-full border border-gray-300"
            style={{ background: currentColors.tertiary }}
          />
        </div>
        {isLoggedIn && (
          <button
            onClick={handleLogout}
            className="w-full text-xs bg-gray-100 hover:bg-gray-200 px-2 py-1 rounded transition-colors"
          >
            Reset Profile
          </button>
        )}
        
        {/* 디버그 정보 */}
        <div className="text-xs text-gray-500 mt-2 border-t pt-2">
          <div>User: {userName}</div>
          <div>Logged: {isLoggedIn ? 'Yes' : 'No'}</div>
        </div>
      </div>
    </div>
  );
}